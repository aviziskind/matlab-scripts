#include <math.h>
void kendl2(float **tab, int i, int j, float *tau, float *z, float *prob)
/*
 * Given a two-dimensional table tab[1..i][1..j], such that tab[k][l] contains the number
 * of events falling in bin k of one variable and bin l of another, this program returns Kendall's
 * as tau, its number of standard deviations from zero as z, and its two-sided signicance level as
 * prob. Small values of prob indicate a signicant correlation (tau positive) or anticorrelation
 * (tau negative) between the two variables. Although tab is a float array, it will normally
 * contain integral values.
 */
{
    float erfcc(float x);
    long nn, mm, m2, m1, lj, li, l, kj, ki, k;
    float svar, s=0.0, points, pairs, en2=0.0, en1=0.0;
    nn=i*j;                 //Total number of entries in contingency table.
    points=tab[i][j];
    for (k=0;k<=nn-2;k++) { //Loop over entries in table,
        ki=(k/j);                   //decoding a row,
                kj=k-j*ki;      //and a column.
                        points += tab[ki+1][kj+1]; // Increment the total count of events.
                for (l=k+1;l<=nn-1;l++) {  //Loop over other member of the pair,
                    li=l/j;                         // decoding its row
                    lj=l-j*li;                      //and column.
                    mm=(m1=li-ki)*(m2=lj-kj);
                    pairs=tab[ki+1][kj+1]*tab[li+1][lj+1];
                    if (mm) {       //Not a tie.
                        en1 += pairs;
                        en2 += pairs;
                        s += (mm > 0 ? pairs : -pairs); // Concordant, or discordant.
                    } else {
                        if (m1) en1 += pairs;
                        if (m2) en2 += pairs;
                    }
                }
    }
    *tau=s/sqrt(en1*en2);
    svar=(4.0*points+10.0)/(9.0*points*(points-1.0));
    *z=(*tau)/sqrt(svar);
    *prob=erfcc(fabs(*z)/1.4142136);
}